 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile G:\work\PSoC\VL_SER~1\VL_SER~1\main.c
 0000                   .dbfunc e main _main fV
 0000           ;           mode -> X+26
 0000           ;              c -> X+25
 0000           ;            str -> X+5
 0000           ;        counter -> X+4
 0000           ;              i -> X+0
 0000           _main::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 381D              add SP,29
 0004                   .dbline 12
 0004           ; //----------------------------------------------------------------------------
 0004           ; // C main line
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; 
 0004           ; #include "stdio.h"
 0004           ; 
 0004           ; 
 0004           ; void main(void)
 0004           ; {
 0004                   .dbline 25
 0004           ;       // M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
 0004           ;       // Insert your main routine code here.
 0004           ;       
 0004           ;       /*
 0004           ;       UART (Digital Comm - UART) блок e конфигуриран за 115200 bps като такта му е от VC3 = SysClock/26 =24MHz = 923076 Hz
 0004           ;       115200 * 8 = 921600
 0004           ;        
 0004           ;       PSoC изпраща периодично ASCII низ представящ стойността на брояч, който всеки път нараства с единица. 
 0004           ;       При получен символ ‘h’ по серииния интерфейс, броячът започва да се показва в шестнайсеттичен вид. 
 0004           ;       При ‘d’ стойността се праща отново в десетичен вид. При ‘с’ броячът се нулира.
 0004           ;       */
 0004           ;       
 0004           ;       unsigned char counter = 0;
 0004 560400            mov [X+4],0
 0007                   .dbline 31
 0007           ;       enum Mode { MODE_HEX=0, MODE_DEC=1 } mode;
 0007           ;       char str[20];
 0007           ;       unsigned char c;
 0007           ;       long int i;
 0007           ;       
 0007           ;       mode = MODE_DEC;
 0007 561A01            mov [X+26],1
 000A                   .dbline 32
 000A           ;       UART_Start(UART_PARITY_NONE);
 000A 10                push X
 000B 5000              mov A,0
 000D 7C0000            xcall _UART_Start
 0010 20                pop X
 0011 8119              xjmp L3
 0013           L2:
 0013                   .dbline 35
 0013           ;       
 0013           ;       while(1)
 0013           ;       {
 0013                   .dbline 36
 0013           ;               counter++;
 0013 7704              inc [X+4]
 0015                   .dbline 38
 0015           ;               //Подготвя се низа за изпращане
 0015           ;               if (mode==MODE_DEC) csprintf(str, "C=%d \r\n",      (int)counter);
 0015 3D1A01            cmp [X+26],1
 0018 B026              jnz L5
 001A                   .dbline 38
 001A 62D000            mov REG[0xd0],>__r0
 001D 5204              mov A,[X+4]
 001F 5300              mov [__r1],A
 0021 5000              mov A,0
 0023 08                push A
 0024 5100              mov A,[__r1]
 0026 08                push A
 0027 5037              mov A,>L7
 0029 08                push A
 002A 5037              mov A,<L7
 002C 08                push A
 002D 5A00              mov [__r1],X
 002F 060005            add [__r1],5
 0032 5007              mov A,7
 0034 08                push A
 0035 5100              mov A,[__r1]
 0037 08                push A
 0038 7C0000            xcall _csprintf
 003B 38FA              add SP,-6
 003D 8024              xjmp L6
 003F           L5:
 003F                   .dbline 39
 003F           ;               else                            csprintf(str, "C=0x%x \r\n", (int )counter);
 003F 62D000            mov REG[0xd0],>__r0
 0042 5204              mov A,[X+4]
 0044 5300              mov [__r1],A
 0046 5000              mov A,0
 0048 08                push A
 0049 5100              mov A,[__r1]
 004B 08                push A
 004C 502D              mov A,>L8
 004E 08                push A
 004F 502D              mov A,<L8
 0051 08                push A
 0052 5A00              mov [__r1],X
 0054 060005            add [__r1],5
 0057 5007              mov A,7
 0059 08                push A
 005A 5100              mov A,[__r1]
 005C 08                push A
 005D 7C0000            xcall _csprintf
 0060 38FA              add SP,-6
 0062           L6:
 0062                   .dbline 41
 0062           ;               //Низа се праща по UART
 0062           ;               UART_PutString(str);
 0062 62D000            mov REG[0xd0],>__r0
 0065 5A00              mov [__r1],X
 0067 060005            add [__r1],5
 006A 10                push X
 006B 5007              mov A,7
 006D 08                push A
 006E 5100              mov A,[__r1]
 0070 5C                mov X,A
 0071 18                pop A
 0072 7C0000            xcall _UART_PutString
 0075 20                pop X
 0076                   .dbline 44
 0076           ;               
 0076           ;               //Някакво закъснение
 0076           ;               for (i=0 ; i!=150000 ; i++);
 0076 560000            mov [X+0],0
 0079 560100            mov [X+1],0
 007C 560200            mov [X+2],0
 007F 560300            mov [X+3],0
 0082           L9:
 0082                   .dbline 44
 0082           L10:
 0082                   .dbline 44
 0082 070301            add [X+3],1
 0085 0F0200            adc [X+2],0
 0088 0F0100            adc [X+1],0
 008B 0F0000            adc [X+0],0
 008E                   .dbline 44
 008E BFF3              jnz L9
 0090 3D0102            cmp [X+1],2
 0093 BFEE              jnz L9
 0095 3D0249            cmp [X+2],73
 0098 BFE9              jnz L9
 009A 3D03F0            cmp [X+3],-16
 009D BFE4              jnz L9
 009F           X1:
 009F                   .dbline 47
 009F           ;               
 009F           ;               //Проверка за приет символ
 009F           ;               c = UART_cReadChar(); //Ако няма приет символ функцията връща 0 веднага
 009F 10                push X
 00A0 7C0000            xcall _UART_cReadChar
 00A3 20                pop X
 00A4 62D000            mov REG[0xd0],>__r0
 00A7 5419              mov [X+25],A
 00A9                   .dbline 48
 00A9           ;               switch (c)
 00A9 5219              mov A,[X+25]
 00AB 541C              mov [X+28],A
 00AD 561B00            mov [X+27],0
 00B0 3D1B00            cmp [X+27],0
 00B3 B006              jnz X2
 00B5 3D1C43            cmp [X+28],67
 00B8 A063              jz L20
 00BA           X2:
 00BA 3D1B00            cmp [X+27],0
 00BD B006              jnz X3
 00BF 3D1C44            cmp [X+28],68
 00C2 A037              jz L16
 00C4           X3:
 00C4 3D1B00            cmp [X+27],0
 00C7 B006              jnz X4
 00C9 3D1C48            cmp [X+28],72
 00CC A03E              jz L18
 00CE           X4:
 00CE 521C              mov A,[X+28]
 00D0 1143              sub A,67
 00D2 521B              mov A,[X+27]
 00D4 3180              xor A,-128
 00D6 1980              sbb A,(0 ^ 0x80)
 00D8 C052              jc L14
 00DA           X5:
 00DA           L22:
 00DA 3D1B00            cmp [X+27],0
 00DD B006              jnz X6
 00DF 3D1C63            cmp [X+28],99
 00E2 A039              jz L20
 00E4           X6:
 00E4 3D1B00            cmp [X+27],0
 00E7 B006              jnz X7
 00E9 3D1C64            cmp [X+28],100
 00EC A00D              jz L16
 00EE           X7:
 00EE 3D1B00            cmp [X+27],0
 00F1 B006              jnz X8
 00F3 3D1C68            cmp [X+28],104
 00F6 A014              jz L18
 00F8           X8:
 00F8 8032              xjmp L14
 00FA           L16:
 00FA                   .dbline 52
 00FA           ;               {
 00FA           ;                       case 'd':
 00FA           ;                       case 'D':
 00FA           ;                               mode = MODE_DEC;
 00FA 561A01            mov [X+26],1
 00FD                   .dbline 53
 00FD           ;                               UART_CPutString("mode = DEC \r\n");
 00FD 10                push X
 00FE 501F              mov A,>L17
 0100 08                push A
 0101 501F              mov A,<L17
 0103 5C                mov X,A
 0104 18                pop A
 0105 7C0000            xcall _UART_CPutString
 0108 20                pop X
 0109                   .dbline 54
 0109           ;                               break;
 0109 8021              xjmp L14
 010B           L18:
 010B                   .dbline 57
 010B           ;                       case 'h':
 010B           ;                       case 'H':                               
 010B           ;                               mode = MODE_HEX;
 010B 561A00            mov [X+26],0
 010E                   .dbline 58
 010E           ;                               UART_CPutString("mode = HEX \r\n");
 010E 10                push X
 010F 5011              mov A,>L19
 0111 08                push A
 0112 5011              mov A,<L19
 0114 5C                mov X,A
 0115 18                pop A
 0116 7C0000            xcall _UART_CPutString
 0119 20                pop X
 011A                   .dbline 59
 011A           ;                               break;;
 011A 8010              xjmp L14
 011C           L20:
 011C                   .dbline 62
 011C           ;                       case 'c':
 011C           ;                       case 'C':
 011C           ;                               UART_CPutString("clear counter \r\n");
 011C 10                push X
 011D 5000              mov A,>L21
 011F 08                push A
 0120 5000              mov A,<L21
 0122 5C                mov X,A
 0123 18                pop A
 0124 7C0000            xcall _UART_CPutString
 0127 20                pop X
 0128                   .dbline 63
 0128           ;                               counter=0;
 0128 560400            mov [X+4],0
 012B                   .dbline 64
 012B           ;                               break;
 012B                   .dbline 66
 012B           ;                       default :
 012B           ;                               break;;
 012B                   .dbline 66
 012B           L14:
 012B                   .dbline 68
 012B           ;               }
 012B           ;       }
 012B           L3:
 012B                   .dbline 34
 012B 8EE7              xjmp L2
 012D           X0:
 012D                   .dbline -2
 012D           L1:
 012D 38E3              add SP,-29
 012F 20                pop X
 0130                   .dbline 0 ; func end
 0130 8FFF              jmp .
 0132                   .dbsym l mode 26 c
 0132                   .dbsym l c 25 c
 0132                   .dbsym l str 5 A[20:20]c
 0132                   .dbsym l counter 4 c
 0132                   .dbsym l i 0 L
 0132                   .dbend
                        .area lit(rom, con, rel, lit)
 0000           L21:
 0000 636C65617220636F756E746572200D0A  .byte 'c,'l,'e,'a,'r,32,'c,'o,'u,'n,'t,'e,'r,32,13,10
 0010 00                .byte 0
 0011           L19:
 0011 6D6F6465203D20484558200D0A00      .byte 'm,'o,'d,'e,32,61,32,'H,'E,'X,32,13,10,0
 001F           L17:
 001F 6D6F6465203D20444543200D0A00      .byte 'm,'o,'d,'e,32,61,32,'D,'E,'C,32,13,10,0
 002D           L8:
 002D 433D30782578200D0A00      .byte 'C,61,48,'x,37,'x,32,13,10,0
 0037           L7:
 0037 433D2564200D0A00  .byte 'C,61,37,'d,32,13,10,0
